import 'package:sqflite/sqflite.dart';

import 'package:path/path.dart';
class Event {
  final String id;
  final String name;
  final String date;
  final String location;
  final String description;
  final String price;
  final String imagePath;

  Event({required this.id,required this.name,required this.date,required this.location,required this.description,required this.price,required this.imagePath});

  factory Event.fromMap(Map<String, dynamic> map) {
    return Event(
      id: map['eventId'],
      name: map['eventName'],
      date: map['eventDate'],
      location: map['eventLocation'],
      description: map['eventDescription'],
      price: map['eventPrice'],
      imagePath: map['eventImagePath'],
    );
  }
  Map<String, dynamic> toMap() {
      return {
        'eventId': id,
        'eventName': name,
        'eventDate': date,
        'eventLocation': location,
        'eventDescription': description,
        'eventPrice': price,
        'eventImagePath': imagePath,
      };
    }
}
class DatabaseHelper {
  static final _databaseName = "MyDatabase.db";
  static final _databaseVersion = 1;

  static final table = 'user_table';
  static final columnId = 'id';
  static final columnName = 'name';
  static final columnLastName = 'lastName';
  static final columnEmail = 'email';
  static final columnPassword = 'password';
  static final columnImagePath = 'imagePath';
  static final eventBookingTable = 'event_booking_table';
  static final favoriteEventTable = 'favorite_event_table';
  static final eventTable = 'event_table';
  static final columnEventId = 'eventId';
  static final columnEventName = 'eventName';
  static final columnEventDate = 'eventDate';
  static final columnEventLocation = 'eventLocation';
  static final columnEventDescription = 'eventDescription';
  static final columnEventPrice = 'eventPrice';
  static final columnEventImagePath = 'eventImagePath';


  // Make this a singleton class.
  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  // Only have a single app-wide reference to the database.
  static Database? _database;
  Future<Database> get database async {
    if (_database != null) return _database!;
    // Lazily instantiate the db the first time it is accessed.
    _database = await _initDatabase();
    return _database!;
  }

  // Open the database and create it if it doesn't exist.
  _initDatabase() async {
    String path = join(await getDatabasesPath(), _databaseName);
    return await openDatabase(path,
        version: _databaseVersion,
        onCreate: _onCreate,
        onUpgrade: _onUpgrade);
  }

// Add this new method
Future _onUpgrade(Database db, int oldVersion, int newVersion) async {
  if (oldVersion < 20) {
    await db.execute('ALTER TABLE $table ADD COLUMN $columnImagePath TEXT');
  }
}

  // SQL code to create the database table.
  Future _onCreate(Database db, int version) async {
    await db.execute('''
          CREATE TABLE $table (
            $columnId INTEGER PRIMARY KEY,
            $columnName TEXT NOT NULL,
            $columnLastName TEXT NOT NULL,
            $columnEmail TEXT NOT NULL,
            $columnPassword TEXT NOT NULL,
            $columnImagePath TEXT

          )
          ''');
          await db.execute('''CREATE TABLE $eventBookingTable (
              id INTEGER PRIMARY KEY,
              userId INTEGER,
              eventId TEXT
            )''');
            await db.execute('''CREATE TABLE $favoriteEventTable (
              id INTEGER PRIMARY KEY,
              userId INTEGER,
              eventId TEXT
            )''');
            await db.execute('''
                      CREATE TABLE $eventTable (
                        $columnEventId TEXT PRIMARY KEY,
                        $columnEventName TEXT,
                        $columnEventDate TEXT,
                        $columnEventLocation TEXT,
                        $columnEventDescription TEXT,
                        $columnEventPrice TEXT,
                        $columnEventImagePath TEXT

                      )
                      ''');
  }
// Method to insert a new user into the database
Future<int> insert(Map<String, dynamic> row) async {
  Database db = await instance.database;
  return await db.insert(table, row);
}

// Method to retrieve all rows from the user table
Future<List<Map<String, dynamic>>> queryAllRows() async {
  Database db = await instance.database;
  return await db.query(table);
}

Future<List<Map<String, dynamic>>> getAllEvents() async {
    Database db = await instance.database;
    return await db.query(eventTable);
}

 Future<int> insertOrUpdateEvent(Event event) async {
   Database db = await instance.database;
   var existingEvent = await getEventById(event.id);
   if (existingEvent != null) {
     // Update existing event (if needed)
     return await updateEvent(event.id, event.toMap());
   } else {
     // Insert new event
     return await db.insert(eventTable, event.toMap());
   }
 }

  // Helper method to query a user by email and password.
  Future<Map<String, dynamic>?> getUserByEmailAndPassword(String email, String password) async {
  Database db = await instance.database;
  List<Map> maps = await db.query(table,
      columns: [columnId, columnName, columnLastName, columnEmail, columnPassword,columnImagePath],
      where: '$columnEmail = ? AND $columnPassword = ?',
      whereArgs: [email, password]);
  
  if (maps.isNotEmpty) {
    // Explicitly cast the map to the correct type
    return Map<String, dynamic>.from(maps.first);
  }
  return null;
}

Future<int> updateUser(Map<String, dynamic> row) async {
    Database db = await instance.database;
    int id = row[columnId];
    return await db.update(table, row, where: '$columnId = ?', whereArgs: [id]);
}

Future<int> deleteUser(int id) async {
    Database db = await instance.database;
    return await db.delete(table, where: '$columnId = ?', whereArgs: [id]);
}

Future<Map<String, dynamic>?> getUserById(int id) async {
    Database db = await instance.database;
    List<Map> maps = await db.query(table,
        columns: [columnId, columnName, columnLastName, columnEmail, columnPassword, columnImagePath],
        where: '$columnId = ?',
        whereArgs: [id]);
    if (maps.isNotEmpty) {
        return Map<String, dynamic>.from(maps.first);
    }
    return null;
}
Future<int> updateUserImagePath(int id, String imagePath) async {
  Database db = await instance.database;
  return await db.update(table, {columnImagePath: imagePath}, where: '$columnId = ?', whereArgs: [id]);
}
Future<Map<String, dynamic>?> getUserImagePath(int id) async {
  Database db = await instance.database;
  List<Map> maps = await db.query(table,
      columns: [columnImagePath],
      where: '$columnId = ?',
      whereArgs: [id]);

  if (maps.isNotEmpty) {
    return Map<String, dynamic>.from(maps.first);
  }
  return null;
}

Future<int> addBooking(int userId, String eventId) async {
    Database db = await instance.database;
    return db.insert(eventBookingTable, {
      'userId': userId,
      'eventId': eventId
    });
  }
Future<int> addFavorite(int userId, String eventId) async {
    Database db = await instance.database;
    return db.insert(favoriteEventTable, {
      'userId': userId,
      'eventId': eventId
    });
  }

  Future<bool> isEventBooked(int userId, String eventId) async {
      Database db = await database;
      var result = await db.query(
        eventBookingTable,
        where: 'userId = ? AND eventId = ?',
        whereArgs: [userId, eventId],
      );
      return result.isNotEmpty;
    }

    Future<bool> isEventFavorited(int userId, String eventId) async {
      Database db = await database;
      var result = await db.query(
        favoriteEventTable,
        where: 'userId = ? AND eventId = ?',
        whereArgs: [userId, eventId],
      );
      return result.isNotEmpty;
    }

Future<List<Event>> getBookedEvents(int userId) async {
  Database db = await database;
  List<Map<String, dynamic>> result = await db.rawQuery('''
    SELECT DISTINCT e.* FROM event_table e
    INNER JOIN event_booking_table b ON e.eventId = b.eventId
    WHERE b.userId = ?
  ''', [userId]);

  return result.map((row) => Event.fromMap(row)).toList();
}

Future<Map<String, dynamic>?> getEventById(String eventId) async {
  Database db = await instance.database;
  var result = await db.query(
    eventTable,
    where: '$columnEventId = ?',
    whereArgs: [eventId],
  );
  if (result.isNotEmpty) {
    return result.first;
  }
  return null;
}

Future<int> updateEvent(String eventId, Map<String, dynamic> row) async {
  Database db = await instance.database;
  return await db.update(
    eventTable,
    row,
    where: '$columnEventId = ?',
    whereArgs: [eventId],
  );
}

Future<List<Event>> getFavoriteEvents(int userId) async {
  Database db = await database;
  List<Map<String, dynamic>> result = await db.rawQuery('''
    SELECT DISTINCT e.* FROM event_table e
    INNER JOIN favorite_event_table f ON e.eventId = f.eventId
    WHERE f.userId = ?
  ''', [userId]);

  return result.map((row) => Event.fromMap(row)).toList();
}


}